#!/usr/bin/python3
# Copyright Douglas Bagnall <douglas@halo.gen.nz> GPLv3
import sys
import re
import unicodedata
from collections import Counter

def possible_n_grams(n, state='v'):
    """Estimate the number of possible n-grams, very roughly."""
    # let's assume there are two states, vowel and consonant.
    #vowels = 10     # a e i o u ā ē ī ō ū
    #consonants = 10 # h k m n ng p r t w wh
    if n <= 0:
        return 1

    total = 0
    if state == 'v':
        total += 10 * possible_n_grams(n - 1, 'c')
    total += 10 * possible_n_grams(n - 1, 'v')
    return total

def generate_n_grams(n, prefix=''):
    """Estimate the number of possible n-grams, very roughly."""
    # let's assume there are two states, vowel and consonant.
    if n <= 0:
        return [prefix]

    chars = 'aeiouāēīōū'
    if prefix == '' or prefix[-1] in 'aeiouāēīōū':
        chars += 'fhkmnŋprtw'

    ngrams = []
    for c in chars:
        ngrams.extend(generate_n_grams(n - 1, prefix + c))
    return ngrams

def remove_english(text):
    words = text.split()
    good_words = []
    #has_bad_letter = re.compile('bcdgjlqsvxyz').search
    has_bad_letter = re.compile('[^aeiouāēīōūfhkmnŋprtw]').search
    has_bad_cluster = re.compile('[fhkmnŋprtw][fhkmnŋprtw]').search
    for word in words:
        if has_bad_letter(word) or has_bad_cluster(word):
            continue
        good_words.append(word)
    return ' '.join(good_words)

DIPHTHONGS = {
    'ae': 'æ',
    'ai': 'ȧ',
    'ao': 'å',
    'au': 'ä',
    'oi': 'ȯ',
    'oe': 'œ',
    'ou': 'ö'
}


def normalise_text(text, diphthongs):
    text = unicodedata.normalize('NFC', text)
    text = text.lower()
    text = re.sub(r'[^\wāēōūī]+', ' ', text)
    text = re.sub(r'ng', 'ŋ', text)
    text = re.sub(r'wh', 'f', text)
    text = remove_english(text)
    if diphthongs:
        for k, v in DIPHTHONGS.items():
            text = re.sub(k, v, text)
    return text


def count_ngrams(text, n, diphthongs=False):
    text = normalise_text(text, diphthongs)
    texts = [text[i:] for i in range(n)]
    ngrams = Counter(''.join(x) for x in zip(*texts) if ' ' not in x)
    return ngrams


def main():
    fn = sys.argv[1]
    f = open(fn)
    s = f.read()
    f.close()
    ngrams = count_ngrams(s, 2, True)
    print(ngrams.most_common(1000))
    print(len(ngrams))

    for i in range(1, 4):
        print(i, possible_n_grams(i))

    possible = generate_n_grams(2)

    common = {k for k, v in ngrams.most_common() if v > 2}
    missing = set(possible) - common
    print ("These bigrams occur less than 3 times in %s" % fn)
    print(sorted(missing))

main()
